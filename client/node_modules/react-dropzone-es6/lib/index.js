'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _attrAccept = require('attr-accept');

var _attrAccept2 = _interopRequireDefault(_attrAccept);

var Dropzone = (function (_React$Component) {
  _inherits(Dropzone, _React$Component);

  function Dropzone(props) {
    _classCallCheck(this, Dropzone);

    _get(Object.getPrototypeOf(Dropzone.prototype), 'constructor', this).call(this, props);
    this.state = { isDragActive: false };

    this.onDragEnter = this.onDragEnter.bind(this);
    this.onDragLeave = this.onDragLeave.bind(this);
    this.onDrop = this.onDrop.bind(this);
    this.onClick = this.onClick.bind(this);
  }

  _createClass(Dropzone, [{
    key: 'allFilesAccepted',
    value: function allFilesAccepted(files) {
      var _this = this;

      return files.every(function (file) {
        return (0, _attrAccept2['default'])(file, _this.props.accept);
      });
    }
  }, {
    key: 'onDragEnter',
    value: function onDragEnter(e) {
      e.preventDefault();

      var dataTransferItems = Array.prototype.slice.call(e.dataTransfer && e.dataTransfer.items ? e.dataTransfer.items : []);
      var allFilesAccepted = this.allFilesAccepted(dataTransferItems);

      this.setState({
        isDragActive: allFilesAccepted,
        isDragReject: !allFilesAccepted
      });

      if (this.props.onDragEnter) {
        this.props.onDragEnter(e);
      }
    }
  }, {
    key: 'onDragOver',
    value: function onDragOver(e) {
      e.preventDefault();
    }
  }, {
    key: 'onDragLeave',
    value: function onDragLeave(e) {
      e.preventDefault();

      this.setState({
        isDragActive: false,
        isDragReject: false
      });

      if (this.props.onDragLeave) {
        this.props.onDragLeave(e);
      }
    }
  }, {
    key: 'onDrop',
    value: function onDrop(e) {
      e.preventDefault();

      this.setState({
        isDragActive: false,
        isDragReject: false
      });

      var droppedFiles = e.dataTransfer ? e.dataTransfer.files : e.target.files;
      var max = this.props.multiple ? droppedFiles.length : 1;
      var files = [];

      for (var i = 0; i < max; i++) {
        var file = droppedFiles[i];
        file.preview = URL.createObjectURL(file);
        files.push(file);
      }

      if (this.props.onDrop) {
        this.props.onDrop(files, e);
      }

      if (this.allFilesAccepted(files)) {
        if (this.props.onDropAccepted) {
          this.props.onDropAccepted(files, e);
        }
      } else {
        if (this.props.onDropRejected) {
          this.props.onDropRejected(files, e);
        }
      }
    }
  }, {
    key: 'onClick',
    value: function onClick() {
      if (!this.props.disableClick) {
        this.open();
      }
    }
  }, {
    key: 'open',
    value: function open() {
      var fileInput = _react2['default'].findDOMNode(this.refs.fileInput);
      fileInput.value = null;
      fileInput.click();
    }
  }, {
    key: 'render',
    value: function render() {
      var className;
      if (this.props.className) {
        className = this.props.className;
        if (this.state.isDragActive) {
          className += ' ' + this.props.activeClassName;
        }
        if (this.state.isDragReject) {
          className += ' ' + this.props.rejectClassName;
        }
      }

      var style;
      var activeStyle;
      if (this.props.style) {
        style = this.props.style;
        activeStyle = this.props.activeStyle;
      } else if (!className) {
        style = {
          width: 200,
          height: 200,
          borderWidth: 2,
          borderColor: '#666',
          borderStyle: 'dashed',
          borderRadius: 5
        };
        activeStyle = {
          borderStyle: 'solid',
          backgroundColor: '#eee'
        };
      }

      var appliedStyle;
      if (style && this.state.isDragActive) {
        appliedStyle = _extends({}, style, activeStyle);
      } else {
        appliedStyle = _extends({}, style);
      }

      return _react2['default'].createElement(
        'div',
        {
          className: className,
          style: appliedStyle,
          onClick: this.onClick,
          onDragEnter: this.onDragEnter,
          onDragOver: this.onDragOver,
          onDragLeave: this.onDragLeave,
          onDrop: this.onDrop
        },
        this.props.children,
        _react2['default'].createElement('input', {
          type: 'file',
          ref: 'fileInput',
          style: { display: 'none' },
          multiple: this.props.multiple,
          accept: this.props.accept,
          onChange: this.onDrop
        })
      );
    }
  }]);

  return Dropzone;
})(_react2['default'].Component);

exports['default'] = Dropzone;

Dropzone.defaultProps = {
  disableClick: false,
  multiple: true
};

Dropzone.propTypes = {
  onDrop: _react2['default'].PropTypes.func.isRequired,
  onDropAccepted: _react2['default'].PropTypes.func,
  onDropRejected: _react2['default'].PropTypes.func,
  onDragEnter: _react2['default'].PropTypes.func,
  onDragLeave: _react2['default'].PropTypes.func,

  style: _react2['default'].PropTypes.object,
  activeStyle: _react2['default'].PropTypes.object,
  className: _react2['default'].PropTypes.string,
  activeClassName: _react2['default'].PropTypes.string,

  disableClick: _react2['default'].PropTypes.bool,
  multiple: _react2['default'].PropTypes.bool,
  accept: _react2['default'].PropTypes.string
};
module.exports = exports['default'];
